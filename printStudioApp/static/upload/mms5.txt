import numpy as np
from scipy.integrate import quad
from math import * 

def fourier(funkcija, period, n):
  An = []
  Bn = []
  a0 = []
  sum = 0
  x = np.arange(0,period,0.001)

  fc = lambda x:funkcija(x)*cos(i*x)
  fs = lambda x:funkcija(x)*sin(i*x)

  for i in range(n):
    a0 = quad(funkcija, 0, period)[0]*(1.0/period)

  for i in range(1, n):
    an = quad(fc, 0, period)[0]*(1.0/(0.5*period))
    An.append(an)

  for i in range(1, n):
    bn = quad(fs, 0, period)[0]*(1.0/(0.5*period))
    Bn.append(bn)
  
  return a0, An, Bn





import numpy as np

def izracunaj_funkciju(funkcija, a0, an, bn, pocetak, kraj, step):
  y = []
  pom = 0.0
  if pocetak > kraj : 
        return
  for x in np.arange(pocetak, kraj, step):
    for i in range(0, len(an)):
      pom = pom + (a0 + an[i]*cos(i*x) + bn[i]*sin(i*x))
    y.append(pom)
    pom = 0.0
  return y

y = izracunaj_funkciju(square, a0, an, bn, 0, 4 * np.pi, 0.01)
print(y)    